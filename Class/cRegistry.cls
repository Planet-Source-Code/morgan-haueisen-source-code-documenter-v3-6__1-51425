VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsRegistry"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'//************************************/
'// Author: Morgan Haueisen
'// Date:   1/5/99
'//************************************/
Option Explicit

'// Examples of each function:
'// CreateNewKey HKEY_CURRENT_USER, "TestKey\SubKey1\SubKey2"
'// SetKeyValue HKEY_CURRENT_USER, "TestKey\SubKey1", "Test", "Testing, Testing", REG_SZ
'// MsgBox QueryValue(HKEY_CURRENT_USER, "TestKey\SubKey1", "Test")
'// DeleteKey HKEY_CURRENT_USER, "TestKey\SubKey1\SubKey2"
'// DeleteValue HKEY_CURRENT_USER, "TestKey\SubKey1", "Test"

Public Enum PreDefinedValueType
    REG_STRING = 1
    REG_INTEGER = 4
    REG_SZ = 1
    REG_DWORD = 4
End Enum

Private Const oREG_SZ As Long = 1
Private Const oREG_DWORD As Long = 4

Public Enum PreDefinedRegKey
    HKEY_CLASSES_ROOT = &H80000000
    HKEY_CURRENT_USER = &H80000001
    HKEY_LOCAL_MACHINE = &H80000002
    HKEY_USERS = &H80000003
End Enum

Private Const ERROR_NONE = 0
Private Const ERROR_BADDB = 1
Private Const ERROR_BADKEY = 2
Private Const ERROR_CANTOPEN = 3
Private Const ERROR_CANTREAD = 4
Private Const ERROR_CANTWRITE = 5
Private Const ERROR_OUTOFMEMORY = 6
Private Const ERROR_INVALID_PARAMETER = 7
Private Const ERROR_ACCESS_DENIED = 8
Private Const ERROR_INVALID_PARAMETERS = 87
Private Const ERROR_NO_MORE_ITEMS = 259

Private Const KEY_ALL_ACCESS = &H3F

Private Const REG_OPTION_NON_VOLATILE = 0

Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueExString Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long
Private Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Long, lpcbData As Long) As Long
Private Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As Long, lpcbData As Long) As Long
Private Declare Function RegSetValueExString Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As String, ByVal cbData As Long) As Long
Private Declare Function RegSetValueExLong Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, ByVal cbData As Long) As Long
Private Declare Function RegDeleteKey& Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String)
Private Declare Function RegDeleteValue& Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String)

Private m_iErr_Handle_Mode As Long 'Init this variable to the desired error handling manage

Public Function DeleteKey(ByVal lPredefinedKey As PreDefinedRegKey, _
                          ByVal sKeyName As String)


    On Error GoTo Err_Proc
'// Description: This Function will Delete a key
'// Syntax: DeleteKey Location, KeyName
'// Location must equal HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_lOCAL_MACHINE, HKEY_USERS
'// KeyName is name of the key you wish to delete, it may include subkeys (example "Key1\SubKey1")

    Dim lRetVal As Long      '// result of the SetValueEx function
    Dim hKey As Long         '// handle of open key
    
    '// open the specified key
    'lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_ALL_ACCESS, hKey)
    lRetVal = RegDeleteKey(lPredefinedKey, sKeyName)
    'RegCloseKey (hKey)
    
Exit_Proc:
    Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "DeleteKey", Err.Description
    Resume Exit_Proc


End Function

Public Function DeleteValue(ByVal lPredefinedKey As PreDefinedRegKey, _
                            ByVal sKeyName As String, _
                            ByVal sValueName As String)


    On Error GoTo Err_Proc
'// Description:  This Function will delete a value
'// Syntax:  DeleteValue Location, KeyName, ValueName

'// Location must equal HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_lOCAL_MACHINE, HKEY_USERS
'// KeyName is the name of the key that the value you wish to delete is in,
'//   it may include subkeys (example "Key1\SubKey1")
'// ValueName is the name of value you wish to delete

    Dim lRetVal As Long      '// result of the SetValueEx function
    Dim hKey As Long         '// handle of open key

    '// open the specified key

    lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_ALL_ACCESS, hKey)
    lRetVal = RegDeleteValue(hKey, sValueName)
    Call RegCloseKey(hKey)
    
Exit_Proc:
    Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "DeleteValue", Err.Description
    Resume Exit_Proc


End Function

Public Function SetValueEx(ByVal hKey As Long, _
                           ByVal sValueName As String, _
                           ByVal lType As Long, _
                           ByVal vValue As Variant) As Long


    Dim lValue As Long
    Dim sValue As String
    
    On Error GoTo Err_Proc

    Select Case lType
        Case oREG_SZ
            sValue = vValue
            SetValueEx = RegSetValueExString(hKey, sValueName, 0&, lType, sValue, Len(sValue))
        Case oREG_DWORD
            lValue = vValue
            SetValueEx = RegSetValueExLong(hKey, sValueName, 0&, lType, lValue, 4)
        End Select

Exit_Proc:
    Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "SetValueEx", Err.Description
    Resume Exit_Proc


End Function

Private Function QueryValueEx(ByVal lhKey As Long, _
                              ByVal szValueName As String, _
                              vValue As Variant) As Long


    Dim cch As Long
    Dim lrc As Long
    Dim lType As Long
    Dim lValue As Long
    Dim sValue As String

    On Local Error GoTo QueryValueExError

    '// Determine the size and type of data to be read

    lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
    If lrc <> ERROR_NONE Then Error 5

    Select Case lType
        '// For strings
        Case oREG_SZ
            sValue = String(cch, 0)
            lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, sValue, cch)
            If lrc = ERROR_NONE Then
                vValue = left$(sValue, cch)
            Else
                vValue = Empty
            End If

        '// For DWORDS
        Case oREG_DWORD
            lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, lValue, cch)
            If lrc = ERROR_NONE Then vValue = lValue
        Case Else
            '// all other data types not supported
            lrc = -1
    End Select

QueryValueExExit:

    QueryValueEx = lrc
    Exit Function

QueryValueExError:

    Resume QueryValueExExit

End Function
Public Function CreateNewKey(ByVal lPredefinedKey As PreDefinedRegKey, _
                             ByVal sNewKeyName As String)


    On Error GoTo Err_Proc
'// Description:  This Function will create a new key
'// Syntax:  QueryValue Location, KeyName
'// Location must equal HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_lOCAL_MACHINE, HKEY_USERS
'// KeyName is name of the key you wish to create, it may include subkeys (example "Key1\SubKey1")
    
    Dim hNewKey As Long         '// handle to the new key
    Dim lRetVal As Long         '// result of the RegCreateKeyEx function
    
    lRetVal = RegCreateKeyEx(lPredefinedKey, sNewKeyName, 0&, vbNullString, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 0&, hNewKey, lRetVal)
    Call RegCloseKey(hNewKey)
    
Exit_Proc:
    Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "CreateNewKey", Err.Description
    Resume Exit_Proc


End Function

Public Function SetKeyValue(ByVal lPredefinedKey As PreDefinedRegKey, _
                            ByVal sKeyName As String, _
                            ByVal sValueName As String, _
                            ByVal vValueSetting As Variant, _
                            ByVal lValueType As PreDefinedValueType)


    On Error GoTo Err_Proc
'// Description:  This Function will set the data field of a value
'// Syntax:  QueryValue Location, KeyName, ValueName, ValueSetting, ValueType
'// Location must equal HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_lOCAL_MACHINE, HKEY_USERS
'// KeyName is the key that the value is under (example: "Key1\SubKey1")
'// ValueName is the name of the value you want create, or set the value of (example: "ValueTest")
'// ValueSetting is what you want the value to equal
'// ValueType must equal either REG_SZ (a string) Or REG_DWORD (an integer)

    Dim lRetVal As Long      '// result of the SetValueEx function
    Dim hKey As Long         '// handle of open key
    
    '// open the specified key
    
    lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_ALL_ACCESS, hKey)
    lRetVal = SetValueEx(hKey, sValueName, lValueType, vValueSetting)
    Call RegCloseKey(hKey)

Exit_Proc:
   
   DoEvents
   Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "SetKeyValue", Err.Description
    Resume Exit_Proc


End Function

Public Function QueryValue(ByVal lPredefinedKey As PreDefinedRegKey, _
                           ByVal sKeyName As String, _
                           ByVal sValueName As String)


    On Error GoTo Err_Proc
'// Description:  This Function will return the data field of a value
'// Syntax:  Variable = QueryValue(Location, KeyName, ValueName)
'// Location must equal HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_lOCAL_MACHINE, HKEY_USERS

'// KeyName is the key that the value is under (example: "Software\Microsoft\Windows\CurrentVersion\Explorer")
'// ValueName is the name of the value you want to access (example: "link")

'// EXP: To return the PC's Name
'// HKEY_LOCAL_MACHINE, "System\CurrentControlSet\control\ComputerName\ComputerName", "ComputerName"

    Dim lRetVal As Long      '// result of the API functions
    Dim hKey As Long         '// handle of opened key
    Dim vValue As Variant    '// setting of queried value
    
    
    lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_ALL_ACCESS, hKey)
    lRetVal = QueryValueEx(hKey, sValueName, vValue)
    QueryValue = vValue
    Call RegCloseKey(hKey)
    
Exit_Proc:
    Exit Function


Err_Proc:
    Err_Handler "clsRegistry", "QueryValue", Err.Description
    Resume Exit_Proc


End Function

Public Property Get GetMachineName() As Variant


    On Error GoTo Err_Proc
  'Dim tName As String
    'tName = QueryValue(HKEY_LOCAL_MACHINE, "System\CurrentControlSet\Control\ComputerName\ComputerName", "ComputerName")
    GetMachineName = Environ("computername") 'left(tName, Len(tName) - 1)
Exit_Proc:
    Exit Property


Err_Proc:
    Err_Handler "clsRegistry", "GetMachineName", Err.Description
    Resume Exit_Proc


End Property


Private Function Err_Handler(ByVal ModuleName As String, ByVal ProcName As String, ByVal ErrorDesc As String) As Boolean

    '* Purpose: Module scope error handling function

    MsgBox "Error occured:" & vbNewLine & _
           "Module: " & ModuleName & vbNewLine & _
           "Function: " & ProcName & vbNewLine & _
           "Description: " & ErrorDesc


    Err_Handler = True

End Function
